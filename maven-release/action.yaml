name: 'Maven Release Action'
description: 'Build and release a Maven project'
outputs:
  version:
    description: 'Built version'
    value: ${{ steps.resolve_values.outputs.version }}
inputs:
  deploy-server:
    description: 'Dist server id, e.g. central, github, nexus'
    required: true
    default: 'github'
  deploy-actor:
    description: 'Dist username'
    required: true
    default: ${{ github.actor }}
  deploy-token:
    description: 'Dist password'
    required: true
    default: ${{ github.token }}
  github-actor:
    description: 'GitHub actor'
    required: true
    default: ${{ github.actor }}
  github-token:
    description: 'GitHub token'
    required: true
    default: ${{ github.token }}
  gpg-passphrase:
    description: 'GPG passphrase'
    required: false
    default: ''
  gpg-private-key:
    description: 'GPG private key'
    required: false
    default: ''
  maven-profiles:
    description: 'Maven profiles to activate, comma-delimited'
    required: false
    default: 'emergent-release'
  java-version:
    description: 'Java version'
    required: false
    default: '17'
  maven-version:
    description: 'Maven version'
    required: true
    default: '3.9.9'
  scm-comment-prefix:
    description: 'Maven release scmCommentPrefix'
    required: false
    default: '[GitHub] [no ci] '
  tag-name-format:
    description: 'Maven release tagNameFormat'
    required: false
    default: '@{project.version}'
  deploy-alt-repo:
    description: 'Value for -DaltDeploymentRepository'
    required: false
    default: ''
  deploy-alt-release-repo:
    description: 'Value for -DaltReleaseDeploymentRepository'
    required: false
    default: ''
  deploy-alt-snapshot-repo:
    description: 'Value for -DaltSnapshotDeploymentRepository'
    required: false
    default: ''
  settings-dir:
    description: 'Path where maven settings.xml lives, default is ~/.m2'
    required: false
    default: ''
  push-changes:
    description: 'Push commits and tags to the source repository'
    required: false
    default: 'true'
  dry-run:
    description: "Perform a dry run release"
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ inputs.github-token }}
        
    #- name: Setup Java Env
    #  id: setup_java
    #  uses: emergentdotorg/github-actions/setup-java-env@v2
    #  with:
    #    deploy-server: ${{ inputs.deploy-server }}
    #    deploy-username-env: 'DEPLOY_ACTOR'
    #    deploy-password-env: 'DEPLOY_TOKEN'
    #    github-username-env: 'GITHUB_ACTOR'
    #    github-password-env: 'GITHUB_TOKEN'
    #    gpg-passphrase-env: 'GPG_PASSPHRASE'
    #    gpg-private-key: ${{ inputs.gpg-private-key }}
    #    maven-version:  ${{ inputs.maven-version }}

    - name: Setup Git Config
      shell: bash
      # language="shell script"
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        printf '%s\n' \
          '/github-actions/' \
          '/gha-creds*.json' \
          '/settings.xml' \
          '/settings-global.xml' \
          '/toolchains.xml' \
          >> ".git/info/exclude"

    - name: Install Maven
      uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.maven-version }}

    - name: Resolve Paths
      id: resolve_paths
      shell: bash
      env:
        GITHUB_WORKSPACE: ${{ github.workspace }}
        SETTINGS_DIR: ${{ inputs.settings-dir != '' && inputs.settings-dir || '~/.m2' }}
      # language="shell script"
      run: |
        RESOLVED_DIR="${SETTINGS_DIR/#~/$HOME}"
        mkdir -p "${RESOLVED_DIR}"
        printf '%s\n' \
          "settings-path=${RESOLVED_DIR}" \
          "user-settings=${RESOLVED_DIR}/settings.xml" \
          "user-toolchains=${RESOLVED_DIR}/toolchains.xml" \
          "global-settings=${RESOLVED_DIR}/settings-global.xml" \
          >> $GITHUB_OUTPUT

    - name: 'Setup Java'
      uses: actions/setup-java@v4
      with:
        cache: 'maven'
        settings-path: ${{ steps.resolve_paths.outputs.settings-path }}
        server-id: ${{ inputs.deploy-server }}
        server-username: 'DEPLOY_ACTOR'
        server-password: 'DEPLOY_TOKEN'
        distribution: 'temurin'
        java-version: |
          8
          11
          17
        mvn-toolchain-id: |
          temurin_8
          temurin_11
          temurin_17

    - uses: s4u/maven-settings-action@v3.1.0
      if: ${{ inputs.deploy-server != 'github' && success() }}
      with:
        path: ${{ steps.resolve_paths.outputs.global-settings }}
        githubServer: 'false'
        servers: >
          [{
            "id": "github",
            "username": "${env.GITHUB_ACTOR}",
            "password": "${env.GITHUB_TOKEN}"
          }]

    - name: 'Verify Java and Maven'
      shell: bash
      env:
        USER_SETTINGS: ${{ steps.resolve_paths.outputs.user-settings }}
        USER_TOOLCHAINS: ${{ steps.resolve_paths.outputs.user-toolchains }}
        GLOBAL_SETTINGS: ${{ steps.resolve_paths.outputs.global-settings }}
      # language="shell script"
      run: |
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        echo "JAVA_HOME_8_X64: $JAVA_HOME_8_X64"
        echo "JAVA_HOME_11_X64: $JAVA_HOME_11_X64"
        echo "JAVA_HOME_17_X64: $JAVA_HOME_17_X64"
        mvn -version
        catIfExists() {
          if [ -f "$1" ]; then
            echo "File: $1"
            cat "$1"
            echo "-----"
          else
            echo "WARNING: File $1 does not exist"
          fi
        }
        catIfExists "${USER_SETTINGS}"
        catIfExists "${GLOBAL_SETTINGS}"
        catIfExists "${USER_TOOLCHAINS}"
        catIfExists ${{ github.workspace }}/.git/config

    #- name: Resolve Actions Ref
    #  id: resolve_action_ref
    #  shell: bash
    #  env:
    #    ACTION_REF: ${{ github.action_ref }}
    #    ACTION_REPO: ${{ github.action_repository }}
    #  # language="shell script"
    #  run: |
    #    echo "ref=${ACTION_REF}" >> $GITHUB_OUTPUT
    #    echo "repo=${ACTION_REPO}" >> $GITHUB_OUTPUT
    #
    #- name: Checkout Actions
    #  uses: actions/checkout@v4
    #  with:
    #    repository: "${{ steps.resolve_action_ref.outputs.repo }}"
    #    ref: "${{ steps.resolve_action_ref.outputs.ref }}"
    #    token: ${{ inputs.github-token }}
    #    path: 'github-actions'
    #    sparse-checkout: |
    #      maven-release/

    - name: Resolve Values
      id: resolve_values
      shell: bash
      env:
        MAVEN_PROFILES: ${{ inputs.maven-profiles }}
        USER_SETTINGS: ${{ steps.resolve_paths.outputs.user-settings }}
        USER_TOOLCHAINS: ${{ steps.resolve_paths.outputs.user-toolchains }}
        GLOBAL_SETTINGS: ${{ steps.resolve_paths.outputs.global-settings }}
      # language="shell script"
      run: |
        declare -a profilesArr=( ${MAVEN_PROFILES} )
        PROFILES=$(IFS=, ; echo "${profilesArr[*]}")
        declare -a mvnArgs=( )
        if [ -f "${USER_SETTINGS}" ]; then
          mvnArgs+=( -s "${USER_SETTINGS}" )
        fi
        if [ -f "${GLOBAL_SETTINGS}" ]; then
          mvnArgs+=( -gs "${GLOBAL_SETTINGS}" )
        fi
        VERSION="$(mvn ${mvnArgs[*]} help:evaluate -q -DforceStdout -Dexpression=project.version)"
        VERSION="${VERSION%-SNAPSHOT}"
        printf '%s\n' \
          "profiles=${PROFILES}" \
          "version=${VERSION}" \
          >> $GITHUB_OUTPUT

    - name: Invoke Maven Release
      shell: bash
      env:
        DEPLOY_SERVER: ${{ inputs.deploy-server }}
        DEPLOY_ACTOR: ${{ inputs.deploy-actor }}
        DEPLOY_TOKEN: ${{ inputs.deploy-token }}
        DEPLOY_ALT_REPO: ${{ inputs.deploy-alt-repo }}
        DEPLOY_ALT_RELEASE_REPO: ${{ inputs.deploy-alt-release-repo }}
        DEPLOY_ALT_SNAPSHOT_REPO: ${{ inputs.deploy-alt-snapshot-repo }}
        GITHUB_ACTOR: ${{ inputs.github-actor }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        MAVEN_GPG_KEY: ${{ inputs.gpg-private-key }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}
        MAVEN_PROFILES: ${{ steps.resolve_values.outputs.profiles }}
        DRY_RUN: ${{ inputs.dry-run }}
        SCM_COMMENT_PREFIX: ${{ inputs.scm-comment-prefix }}
        TAG_NAME_FORMAT: ${{ inputs.tag-name-format }}
        USER_SETTINGS: ${{ steps.resolve_paths.outputs.user-settings }}
        USER_TOOLCHAINS: ${{ steps.resolve_paths.outputs.user-toolchains }}
        GLOBAL_SETTINGS: ${{ steps.resolve_paths.outputs.global-settings }}
      # language="shell script"
      run: |
        declare -a _args=( "-B" )
        _args+=( "-e" )
        _args+=( "-DlocalCheckout=true" )
        _args+=( "-DpushChanges=false" )
        if [ -n "${GITHUB_REPOSITORY}" ]; then
          _args+=( "-DownerAndProject=${GITHUB_REPOSITORY}" )
        fi
        if [ -n "${SCM_COMMENT_PREFIX}" ]; then
          _args+=( "-DscmCommentPrefix=${SCM_COMMENT_PREFIX}" )
        fi
        if [ -n "${TAG_NAME_FORMAT}" ]; then
          _args+=( "-DtagNameFormat=${TAG_NAME_FORMAT}" )
        fi
        if [ -n "${MAVEN_PROFILES}" ]; then
          _args+=( "-P=${MAVEN_PROFILES}" )
        fi
        declare -a argsOpt_=( )
        argsOpt_+=( "--no-transfer-progress" )
        if [ -f "${USER_SETTINGS}" ]; then
          argsOpt_+=( -s "${USER_SETTINGS}" )
        fi
        if [ -f "${GLOBAL_SETTINGS}" ]; then
          argsOpt_+=( -gs "${GLOBAL_SETTINGS}" )
        fi
        if [ "central" = "${DEPLOY_SERVER}" ]; then
          argsOpt_+=( "-DpublishingServerId=${DEPLOY_SERVER}" )
        fi
        if [ -n "${DEPLOY_ALT_REPO}" ]; then
          argsOpt_+=( "-DaltDeploymentRepository=${DEPLOY_ALT_REPO}" )
        fi
        if [ -n "${DEPLOY_ALT_RELEASE_REPO}" ]; then
          argsOpt_+=( "-DaltReleaseDeploymentRepository=${DEPLOY_ALT_RELEASE_REPO}" )
        fi
        if [ -n "${DEPLOY_ALT_SNAPSHOT_REPO}" ]; then
          argsOpt_+=( "-DaltSnapshotDeploymentRepository=${DEPLOY_ALT_SNAPSHOT_REPO}" )
        fi
        _args+=( "${argsOpt_[@]}" )
        _args+=( "-Darguments=${argsOpt_[*]}" )
        declare -a _goals=( "release:prepare" )
        if [ "${DRY_RUN}" != "true" ]; then 
          _goals+=( "release:perform" ) ; 
        fi
        mvn "${_args[@]}" "${_goals[@]}"

    - name: Commit Maven Release
      if: ${{ inputs.dry-run != 'true' && inputs.push-changes == 'true' && success() }}
      shell: bash
      # language="shell script"
      run: git push --follow-tags  --atomic

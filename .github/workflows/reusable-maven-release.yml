name: Reusable Maven Release

on:
  workflow_call:
    # Map the workflow outputs to job outputs
    outputs:
      version:
        description: "The new release version"
        value: ${{ jobs.release.outputs.version }}
    inputs:
      java-version:
        description: 'JDK version to build with'
        type: string
        required: true
      dry-run:
        description: 'Skip actually committing or deploying'
        type: boolean
        required: false
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    # Map the job outputs to step outputs
    outputs:
      version: ${{ steps.resolve_vars.outputs.version }}
    env:
      DEPLOY_USERNAME: ${{ secrets.maven_central_actor }}
      DEPLOY_PASSWORD: ${{ secrets.maven_central_token }}
      GPG_PASSPHRASE: ${{ secrets.maven_gpg_passphrase }}
    steps:
      - uses: actions/checkout@v4

      - name: 'Set up JDK'
        uses: actions/setup-java@v4
        with:
          java-version: |
            17
            11
            8
            ${{ inputs.java-version }}
          mvn-toolchain-id: |
            temurin_17
            temurin_11
            temurin_8
            selected
          distribution: 'temurin'
          server-id: central
          server-username: DEPLOY_USERNAME
          server-password: DEPLOY_PASSWORD
          gpg-passphrase: GPG_PASSPHRASE
          gpg-private-key: ${{ secrets.maven_gpg_private_key }}

      - name: 'Verify Java environment variables'
        shell: bash
        run: |
          java -version
          echo "JAVA_HOME: $JAVA_HOME"
          echo "JAVA_HOME_8_X64: $JAVA_HOME_8_X64"
          echo "JAVA_HOME_11_X64: $JAVA_HOME_11_X64"
          echo "JAVA_HOME_17_X64: $JAVA_HOME_17_X64"

      - name: 'Configure Git User'
        shell: bash
        # language="shell script"
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - uses: stCarolas/setup-maven@v5
        with:
          maven-version: 3.9.9

      - name: Resolve Vars
        id: resolve_vars
        shell: bash
        env:
          MAVEN_PROFILES: emergent-release
        # language="shell script"
        run: |
          declare -a profiles_=( ${MAVEN_PROFILES} )
          PROFILES=$(IFS=, ; echo "${profiles_[*]}")
          VERSION="$( mvn help:evaluate -Dexpression=project.version -q -DforceStdout )"
          VERSION="${VERSION%-SNAPSHOT}"
          printf '%s\n' \
            "version=${VERSION}" \
            "profiles=${PROFILES}" \
            >> $GITHUB_OUTPUT

      - name: Perform Maven Release
        shell: bash
        env:
          DRY_RUN: ${{ inputs.dry-run }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
          RELEASE_PROFILES: ${{ steps.resolve_vars.outputs.profiles }}
        # language="shell script"
        run: |
          declare -a mvnArgsArr=( "-B" )
          mvnArgsArr+=( "-DdryRun=${DRY_RUN}" )
          mvnArgsArr+=( "-DpushChanges=false" )
          mvnArgsArr+=( "-DlocalCheckout=true" )
          mvnArgsArr+=( "-DscmCommentPrefix=[GitHub] [no ci] " )
          mvnArgsArr+=( "-DtagNameFormat=@{project.version}" )
          declare -a argsOpt_=( "--no-transfer-progress" )
          mvnArgsArr+=( "${argsOpt_[@]}" )
          mvnArgsArr+=( "-Darguments=${argsOpt_[*]}" )
          if [ -n "${RELEASE_PROFILES}" ]; then
            mvnArgsArr+=( "-P" "${RELEASE_PROFILES}" )
            mvnArgsArr+=( "-DreleaseProfiles=${RELEASE_PROFILES}" )
            mvnArgsArr+=( "-DpreparationProfiles=${RELEASE_PROFILES}" )
          fi
          declare -a mvnGoals_=( 'release:prepare' )
          if [ "${DRY_RUN}" != "true" ]; then
            mvnGoals_+=( "release:perform" )
          fi
          mvn "${mvnArgsArr[@]}" "${mvnGoals_[@]}"

      - name: Commit Maven Release
        if: ${{ ! inputs.dry-run && success() }}
        shell: bash
        # language="shell script"
        run: git push --follow-tags --atomic

name: 'Maven Deploy Action'
description: 'Build and deploy a Maven project'
outputs:
  tagname:
    description: 'The tag name'
    value: ${{ steps.resolve_tag.outputs.tagname }}
  version:
    description: 'The version string'
    value: ${{ steps.resolve_tag.outputs.version }}
inputs:
  java-version:
    description: 'The version of Java to build and release with'
    required: true
  gpg-private-key:
    description: 'The encoded gpg private key'
    required: true
  gpg-passphrase:
    description: 'The gpg private key passphrase'
    required: true
  deploy-server:
    description: 'Dist server id, e.g. central, github, nexus'
    required: true
  deploy-actor:
    description: 'user to authenticate at the artifact repository'
    required: true
  deploy-token:
    description: 'password to authenticate at the artifact repository'
    required: true
  github-actor:
    description: 'The github server username, required for tag commit permission'
    default: ${{ github.actor }}
  github-token:
    description: 'The github server password, required for tag commit permission'
    default: ${{ github.token }}
  maven-profiles:
    description: 'Maven profiles to activate, comma-delimited'
    default: ''
  maven-version:
    description: 'Maven version'
    default: '3.9.9'
  release-branches:
    description: >
      Comma separated list of branches (bash reg exp accepted) that will generate the release tags. Other branches and 
      pull-requests generate versions postfixed with the commit hash and do not generate any tag. Examples: `master` or
      `.*` or `release.*,hotfix.*,master`...
    required: false
    default: 'main,master'
  dry-run:
    description: "Perform a dry run release"
    default: ''

runs:
  using: 'composite'
  steps:

    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        fetch-tags: true
        token: ${{ inputs.github-token }}

    - uses: emergentdotorg/github-actions/git-init-user@v3

    - id: resolve_tag
      uses: emergentdotorg/github-actions/get-or-mk-tag@v3
      with:
        github-token: ${{ inputs.github-token }}
        release-branches: ${{ inputs.release-branches }}

    - shell: bash
      id: resolve_vars
      env:
        DRY_RUN: ${{ inputs.dry-run }}
        JAVA_VERSION: ${{ inputs.java-version }}
        MAVEN_PROFILES: ${{ inputs.maven-profiles }}
        DEPLOY_SERVER: ${{ inputs.deploy-server }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
        SETTINGS_DIR: '~/.m2'
      # language="shell script"
      run: |
        . ${GITHUB_ACTION_PATH}/include.sh
        EXECMD_PREFIX=""
        if [[ "${DRY_RUN}" = "true" ]]; then
          EXECMD_PREFIX="echo "
        fi
        if [[ -f "./mvnw" ]]; then
          HAS_MVNW="true"
        else
          HAS_MVNW="false"        
        fi
        # Resolve where the default maven user settings would live.
        RESOLVED_DIR="${SETTINGS_DIR/#~/$HOME}"
        mkdir -p "${RESOLVED_DIR}"
        # Determine where the settings and toolchain files actually are.
        USER_SETTINGS_FILE="${GITHUB_ACTION_PATH}/settings.xml"
        USER_TOOLCHAINS_FILE="${RESOLVED_DIR}/toolchains.xml"
        # Convert spaces to commas in the profiles string
        declare -a _profiles=( ${MAVEN_PROFILES} )
        ACTIVATED_PROFILES=$(IFS=, ; echo "${_profiles[*]}")
        printf '%s\n' \
          "has_mvnw=${HAS_MVNW}" \
          "activated_profiles=${ACTIVATED_PROFILES}" \
          "user_settings_file=${USER_SETTINGS_FILE}" \
          "user_toolchains_file=${USER_TOOLCHAINS_FILE}" \
          >> $GITHUB_OUTPUT
        printf '%s\n' \
          "EXECMD_PREFIX=${EXECMD_PREFIX}" \
          "DEPLOY_SERVER=${DEPLOY_SERVER}" \
          "ACTIVATED_PROFILES=${ACTIVATED_PROFILES}" \
          "USER_SETTINGS_FILE=${USER_SETTINGS_FILE}" \
          "USER_TOOLCHAINS_FILE=${USER_TOOLCHAINS_FILE}" \
          >> $GITHUB_ENV
        # Build the list of SDKs to install
        {
          echo 'JAVA_SDK_VERSIONS<<EOF'
          calcJavaVers 17
          echo EOF
        } >> "$GITHUB_ENV"

    - uses: actions/setup-java@v4
      with:
        server-id: ${{ inputs.deploy-server }}
        server-username: DEPLOY_ACTOR
        server-password: DEPLOY_TOKEN
        distribution: 'temurin'
        java-version: "${{ env.JAVA_SDK_VERSIONS }}"

    - uses: stCarolas/setup-maven@v5
      with:
        maven-version: ${{ inputs.maven-version }}

    - shell: bash
      # language="shell script"
      run: |
        . "${GITHUB_ACTION_PATH}/include.sh"
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        echo "JAVA_HOME_8_X64: $JAVA_HOME_8_X64"
        echo "JAVA_HOME_11_X64: $JAVA_HOME_11_X64"
        echo "JAVA_HOME_17_X64: $JAVA_HOME_17_X64"
        echo "JAVA_HOME_21_X64: $JAVA_HOME_21_X64"
        mvn -version
        catIfExists "${USER_SETTINGS_FILE}"
        catIfExists "${USER_TOOLCHAINS_FILE}"

    - shell: bash
      id: resolve_revision
      env:
        RESOLVED_VERSION: ${{ steps.resolve_tag.outputs.version }}
      # language="shell script"
      run: |
        . "${GITHUB_ACTION_PATH}/include.sh"
        set +e
        # declare -a mvnArgs_=( -e -q -DforceStdout )
        # if [ -n "${REVISION}" ] ; then mvnArgs_+=( "-Drevision=${REVISION}" ) ; fi
        PROJECT_VERSION="$(mvn -q -e help:evaluate -DforceStdout -Dexpression=project.version)"
        if [ "${RESOLVED_VERSION}" != "${PROJECT_VERSION}" ]; then
          REVISION="${RESOLVED_VERSION}"
        fi
        if [[ $RESOLVED_VERSION =~ "SNAPSHOT" ]]; then RELEASE=false ; else RELEASE=true ; fi
        #VERSION="${VERSION%-SNAPSHOT}"
        echo "RELEASE=${RELEASE}"
        echo "REVISION=${REVISION}"
        set -e
        printf '%s\n' \
          "release=${RELEASE}" \
          "revision=${REVISION}" \
          >> $GITHUB_OUTPUT

    - shell: bash
      if: ${{ steps.resolve_revision.outputs.release == 'true' || inputs.deploy-server != 'central' }}
      env:
        DRY_RUN: ${{ inputs.dry-run }}
        REVISION: ${{ steps.resolve_revision.outputs.revision }}
        DEPLOY_ACTOR: ${{ inputs.deploy-actor }}
        DEPLOY_TOKEN: ${{ inputs.deploy-token }}
        MAVEN_GPG_KEY: ${{ inputs.gpg-private-key }}
        MAVEN_GPG_PASSPHRASE: ${{ inputs.gpg-passphrase }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      # language="shell script"
      run: |
        . "${GITHUB_ACTION_PATH}/include.sh"
        declare -a mvnArgs_=( "-B" "-ntp" -e -U )
        mvnArgs_+=( "-DdeployAtEnd=true" )
        if [ -n "${REVISION}" ] ; then mvnArgs_+=( "-Drevision=${REVISION}" ) ; fi
        if [ -n "${USER_SETTINGS_FILE}" ] ; then mvnArgs_+=( "-s" "${USER_SETTINGS_FILE}" ) ; fi
        if [ -n "${USER_TOOLCHAINS_FILE}" ] ; then mvnArgs_+=( "-t" "${USER_TOOLCHAINS_FILE}" ) ; fi
        if [ -n "${ACTIVATED_PROFILES}" ] ; then mvnArgs_+=( "-P${ACTIVATED_PROFILES}" ) ; fi
        export GPG_TTY=$(tty) && ${EXECMD_PREFIX} mvn "${mvnArgs_[@]}" clean deploy
#!/usr/bin/env bash

SCRIPTDIR="$(unset CDPATH && cd "`dirname "$0"`" && pwd)"
echo "SCRIPTDIR=${SCRIPTDIR}"

getNextTagVersion() {
  SCOPE="$1"
  if [ -z "$SCOPE" ]; then
    SCOPE="auto"
  fi
  # We get the next version, without tagging
  nextversion="$( source "${SCRIPTDIR}/semtag" final -fos "$SCOPE" )"
  echo "$nextversion"
}

setNextTagVersion() {
  nextversion="$1"
  # We update the tag with the new version
  output="$( source "${SCRIPTDIR}/semtag" final -v "$nextversion" )"
  rt=$? ; echo "${output}" ; [[ $rt -eq 0 ]] || exit $rt
}

replaceNextTagVersion() {
  # We replace the placeholder in the source with the new version
  replace="s/^PROG_VERSION=\"[^\"]*\"/PROG_VERSION=\"$nextversion\"/g"
  sed -i.bak "$replace" semtag
  # We replace the version in the README file with the new version
  replace="s/^\[Version: [^[]*]/[Version: $nextversion]/g"
  sed -i.bak "$replace" README.md
  # We remove the backup README.md generated by the sed command
  rm semtag.bak
  rm README.md.bak

  # We add both changed files
  if ! git add semtag README.md ; then
    echo "Error adding modified files with new version"
    exit 1
  fi

  if ! git commit -m "Update readme and info to $nextversion" ; then
    echo "Error committing modified files with new version"
    exit 1
  fi

  if ! git push ; then
    echo "Error pushing modified files with new version"
    exit 1
  fi
}


